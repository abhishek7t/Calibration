CSet = cell(1,2);
RSet = cell(1,2);
CSet{1,1} = [0 0 0]';
RSet{1,1} = eye(3);
CSet{1,2} = t';
RSet{1,2} = r;
plotC(CSet, RSet, .01 )
R = r';
T = -r' * t';


figure; 
imshow(imageFileNames{1}); 
hold on;
plot(imagePoints(:,1,1), imagePoints(:,2,1),'go');
plot(params.ReprojectedPoints(:,1,1),params.ReprojectedPoints(:,2,1),'r+');
legend('Detected Points','ReprojectedPoints');
hold off;


Syntax
imagePoints = worldToImage(cameraParams,rotationMatrix,translationVector,worldPoints)
imagePoints = worldToImage(cameraParams,'ApplyDistortion',distort)
Description
example
imagePoints = worldToImage(cameraParams,rotationMatrix,translationVector,worldPoints) returns the projection of 3-D world points into an image given camera parameters, the rotation matrix, and the translation vector.
imagePoints = worldToImage(cameraParams,'ApplyDistortion',distort) returns the projection with the option of applying distortion. This syntax is supported for nonfisheye camera parameters.

for pair (1,2)
x = worldToImage(calibParams{1, 2}, eye(3), [0 0 0], points3D(13).points, 'ApplyDistortion', true);
sanityCheck(263,x,data);
      %check the following
x = worldToImage(calibParams{1, 2}, r, t , loc(49).points, 'ApplyDistortion', true);
sanityCheck(299,x,data);


#verified
H = H3{2};
tr = [ones(99,1)*H(1,4) ones(99,1)*H(2,4) ones(99,1)*H(3,4)];
x = worldToImage(calibParams{1, 2}, H(1:3,1:3), -H(1:3,4)'*H(1:3,1:3), points3D(13).points * H(1:3,1:3)' + tr, 'ApplyDistortion', true);
sanityCheck(263,x,data);

#verified
x = worldToImage(calibParams{1, 1}, H(1:3,1:3) * r, t - H(1:3,4)'*H(1:3,1:3)*r, points3D(15).points * H(1:3,1:3)' + tr, 'ApplyDistortion', true);
sanityCheck(15,x,data);

%%for pair (3, 4)
x = worldToImage(calibParams{1, 3}, eye(3), [0 0 0], points3D(619-500).points , 'ApplyDistortion', true);
sanityCheck(619,x,data);

 x = worldToImage(calibParams{1, 4}, r, t, points3D(619-500).points , 'ApplyDistortion', true);
sanityCheck(869,x,data)

%%for pair (4, 5)
H = H3{4};
tr = [ones(99,1)*H(1,4) ones(99,1)*H(2,4) ones(99,1)*H(3,4)];
x = worldToImage(calibParams{1, 4}, H(1:3,1:3), -H(1:3,4)'*H(1:3,1:3), points3D(891 - 250*3).points * H(1:3,1:3)' + tr, 'ApplyDistortion', true);
sanityCheck(891,x,data);

x = worldToImage(calibParams{1, 5}, H(1:3,1:3)*r, t -H(1:3,4)'*H(1:3,1:3)*r, points3D(891 - 250*3).points * H(1:3,1:3)' + tr, 'ApplyDistortion', true);
sanityCheck(1141,x,data);

%%for pair (5, 6)
H = H3{5};
tr = [ones(99,1)*H(1,4) ones(99,1)*H(2,4) ones(99,1)*H(3,4)];
x = worldToImage(calibParams{1, 5}, H(1:3,1:3), -H(1:3,4)'*H(1:3,1:3), points3D(1178 - 250*4).points * H(1:3,1:3)' + tr, 'ApplyDistortion', true);
sanityCheck(1178,x,data);

x = worldToImage(calibParams{1, 6}, H(1:3,1:3)*r, t - H(1:3,4)'*H(1:3,1:3)*r, points3D(1178 - 250*4).points * H(1:3,1:3)' + tr, 'ApplyDistortion', true);
sanityCheck(1178+250,x,data);